generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model user {
  id            String          @id @default(uuid())
  email         String          @unique @db.VarChar(100)
  password      String          @db.Text
  username      String          @unique @db.VarChar(255)
  firstname     String          @default("") @db.VarChar(255)
  lastname      String          @default("") @db.VarChar(255)
  bio           String          @default("") @db.VarChar(255)
  dob           String          @default("") @db.VarChar(255)
  tokenversion  Int             @default(0)
  isComplete    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  comment       comment[]
  following     friends[]       @relation("following")
  followers     friends[]       @relation("user")
  like          like[]
  notifications notifications[]
  post          post[]
  news_feed     news_feed[]
}

model friends {
  id         String   @id @default(uuid())
  userId     String
  friendId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isAccepted Boolean  @default(false)
  block      Boolean  @default(false)
  follower   user     @relation("following", fields: [friendId], references: [id], onDelete: Cascade)
  user       user     @relation("user", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([friendId, userId])
}

model comment {
  id               String    @id @default(uuid())
  content          String
  postId           String
  userId           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  parrentCommentId String?
  comment          comment?  @relation("commentTocomment", fields: [parrentCommentId], references: [id], onDelete: Cascade)
  other_comment    comment[] @relation("commentTocomment")
  post             post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user             user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  postId    String
  post      post     @relation(fields: [postId], references: [id])
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model notifications {
  id        String           @id @default(uuid())
  content   String
  userId    String
  createdAt DateTime         @default(now())
  type      NotificationType
  redirect  String
  read      Boolean          @default(false)
  user      user             @relation(fields: [userId], references: [id])
}

model post {
  id        String      @id @default(uuid())
  userId    String
  media     String      @default("")
  content   String      @db.Text
  type      PostType    @default(CONTENT_ONLY)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  comment   comment[]
  news_feed news_feed[]
  like      like[]
  user      user        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model news_feed {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id])
  post      post     @relation(fields: [postId], references: [id])
}

enum NotificationType {
  POST_LIKE
  POST_COMMENT
  COMMENT_REPLY
  REQUEST_ACCEPTED
}

enum PostType {
  CONTENT_ONLY
  MEDIA_ONLY
  MEDIA_WITH_CONTENT_ONLY
}
