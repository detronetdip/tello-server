// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            String          @id @default(uuid())
  username      String          @db.VarChar(255)
  firstname     String          @default("") @db.VarChar(255)
  lastname      String          @default("") @db.VarChar(255)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  followers     friends[]       @relation(name: "user")
  following     friends[]       @relation(name: "following")
  posts         post[]
  comments      comment[]
  likes         like[]
  notifications notifications[]
}

model friends {
  id        String   @id @default(uuid())
  user      user     @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  follower  user     @relation(name: "following", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  block     Boolean  @default(false)

  @@unique([friendId, userId])
}

model post {
  id        String    @id @default(uuid())
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  media     String    @default("")
  content   String    @db.VarChar(255)
  type      PostType  @default(CONTENT_ONLY)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  comment[]
  likes     like[]
}

model comment {
  id               String    @id @default(uuid())
  content          String
  postId           String
  userId           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  parrentCommentId String?
  parrentId        post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user             user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parrent          comment?  @relation("nested-comments", fields: [parrentCommentId], references: [id], onDelete: Cascade)
  subComments      comment[] @relation("nested-comments")
}

model like {
  id        String   @id @default(uuid())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      post     @relation(fields: [postId], references: [id])
  likeCount BigInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
}

model notifications {
  id        String           @id @default(uuid())
  content   String
  userId    String
  createdAt DateTime         @default(now())
  type      NotificationType
  redirect  String
  read      Boolean          @default(false)
  user      user             @relation(fields: [userId], references: [id])
}

enum NotificationType {
  POST_LIKE
  POST_COMMENT
  COMMENT_REPLY
}

enum PostType {
  CONTENT_ONLY
  MEDIA_ONLY
  MEDIA_WITH_CONTENT_ONLY
}
